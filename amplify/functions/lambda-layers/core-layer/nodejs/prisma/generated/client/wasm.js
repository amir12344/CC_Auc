
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressesScalarFieldEnum = {
  address_id: 'address_id',
  first_name: 'first_name',
  last_name: 'last_name',
  address1: 'address1',
  address2: 'address2',
  address3: 'address3',
  city: 'city',
  province: 'province',
  province_code: 'province_code',
  country: 'country',
  country_code: 'country_code',
  zip: 'zip',
  phone: 'phone',
  company: 'company',
  latitude: 'latitude',
  longitude: 'longitude',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.Auction_bid_historyScalarFieldEnum = {
  auction_bid_history_id: 'auction_bid_history_id',
  auction_listing_id: 'auction_listing_id',
  previous_bid_amount: 'previous_bid_amount',
  new_bid_amount: 'new_bid_amount',
  bid_amount_currency: 'bid_amount_currency',
  bidder_user_id: 'bidder_user_id',
  action_type: 'action_type',
  timestamp: 'timestamp',
  created_at: 'created_at'
};

exports.Prisma.Auction_bidsScalarFieldEnum = {
  auction_bid_id: 'auction_bid_id',
  auction_listing_id: 'auction_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  bidder_user_id: 'bidder_user_id',
  bidder_buyer_profile_id: 'bidder_buyer_profile_id',
  bid_amount: 'bid_amount',
  bid_amount_currency: 'bid_amount_currency',
  bid_type: 'bid_type',
  is_winning_bid: 'is_winning_bid',
  bid_timestamp: 'bid_timestamp',
  created_at: 'created_at',
  public_id: 'public_id',
  bid_sequence_number: 'bid_sequence_number'
};

exports.Prisma.Auction_listing_imagesScalarFieldEnum = {
  auction_listing_image_id: 'auction_listing_image_id',
  auction_listing_id: 'auction_listing_id',
  image_id: 'image_id'
};

exports.Prisma.Auction_listing_product_manifestsScalarFieldEnum = {
  auction_listing_product_manifest_id: 'auction_listing_product_manifest_id',
  auction_listing_id: 'auction_listing_id',
  category: 'category',
  subcategory: 'subcategory',
  title: 'title',
  description: 'description',
  brand_id: 'brand_id',
  sku: 'sku',
  identifier: 'identifier',
  identifier_type: 'identifier_type',
  external_identifier: 'external_identifier',
  external_identifier_type: 'external_identifier_type',
  part_number: 'part_number',
  model_name: 'model_name',
  product_condition: 'product_condition',
  cosmetic_condition: 'cosmetic_condition',
  available_quantity: 'available_quantity',
  retail_price: 'retail_price',
  ext_retail: 'ext_retail',
  is_hazmat: 'is_hazmat',
  lot_id: 'lot_id',
  pallet_id: 'pallet_id',
  department: 'department',
  accessories: 'accessories',
  weight: 'weight',
  product_weight_type: 'product_weight_type',
  product_height: 'product_height',
  product_length: 'product_length',
  product_width: 'product_width',
  product_length_type: 'product_length_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  retail_price_currency: 'retail_price_currency',
  ext_retail_currency: 'ext_retail_currency',
  case_pack: 'case_pack',
  case_weight_type: 'case_weight_type',
  case_weight: 'case_weight',
  case_dimension_type: 'case_dimension_type',
  case_length: 'case_length',
  case_width: 'case_width',
  case_height: 'case_height'
};

exports.Prisma.Auction_listing_visibility_rulesScalarFieldEnum = {
  rule_id: 'rule_id',
  auction_listing_id: 'auction_listing_id',
  rule_type: 'rule_type',
  rule_value: 'rule_value',
  is_inclusion: 'is_inclusion',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Auction_listingsScalarFieldEnum = {
  auction_listing_id: 'auction_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  description: 'description',
  category: 'category',
  category2: 'category2',
  category3: 'category3',
  subcategory: 'subcategory',
  subcategory2: 'subcategory2',
  subcategory3: 'subcategory3',
  subcategory4: 'subcategory4',
  subcategory5: 'subcategory5',
  status: 'status',
  default_image_url: 'default_image_url',
  lot_condition: 'lot_condition',
  cosmetic_condition: 'cosmetic_condition',
  shipping_cost: 'shipping_cost',
  total_units: 'total_units',
  total_ex_retail_price: 'total_ex_retail_price',
  estimated_retail_value: 'estimated_retail_value',
  estimated_weight: 'estimated_weight',
  weight_type: 'weight_type',
  is_refrigerated: 'is_refrigerated',
  is_fda_registered: 'is_fda_registered',
  is_hazmat: 'is_hazmat',
  is_private: 'is_private',
  location_address_id: 'location_address_id',
  auction_shipping_type: 'auction_shipping_type',
  auction_freight_type: 'auction_freight_type',
  piece_count: 'piece_count',
  lot_packaging: 'lot_packaging',
  number_of_pallets: 'number_of_pallets',
  pallet_spaces: 'pallet_spaces',
  number_of_truckloads: 'number_of_truckloads',
  number_of_shipments: 'number_of_shipments',
  resale_requirement: 'resale_requirement',
  accessories: 'accessories',
  inspection_status: 'inspection_status',
  seller_notes: 'seller_notes',
  shipping_notes: 'shipping_notes',
  additional_information: 'additional_information',
  bidding_requirements: 'bidding_requirements',
  minimum_bid: 'minimum_bid',
  current_bid: 'current_bid',
  bid_increment_value: 'bid_increment_value',
  bid_increment_type: 'bid_increment_type',
  winner_user_id: 'winner_user_id',
  winner_buyer_profile_id: 'winner_buyer_profile_id',
  current_bidder_user_id: 'current_bidder_user_id',
  current_bidder_buyer_profile_id: 'current_bidder_buyer_profile_id',
  auction_status: 'auction_status',
  auction_end_time: 'auction_end_time',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  shipping_cost_currency: 'shipping_cost_currency',
  total_ex_retail_price_currency: 'total_ex_retail_price_currency',
  estimated_retail_value_currency: 'estimated_retail_value_currency',
  minimum_bid_currency: 'minimum_bid_currency',
  current_bid_currency: 'current_bid_currency',
  bid_increment_value_currency: 'bid_increment_value_currency',
  short_title: 'short_title',
  version: 'version'
};

exports.Prisma.BrandsScalarFieldEnum = {
  brand_id: 'brand_id',
  brand_name: 'brand_name',
  brand_description: 'brand_description',
  brand_website: 'brand_website',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Buyer_profile_preferencesScalarFieldEnum = {
  buyer_profile_preference_id: 'buyer_profile_preference_id',
  buyer_profile_id: 'buyer_profile_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  preferred_categories: 'preferred_categories',
  preferred_subcategories: 'preferred_subcategories',
  budget_min: 'budget_min',
  budget_max: 'budget_max',
  budget_currency: 'budget_currency',
  minimum_discount_percentage: 'minimum_discount_percentage',
  listing_type_preferences: 'listing_type_preferences',
  buyer_segments: 'buyer_segments',
  preferred_regions: 'preferred_regions'
};

exports.Prisma.Buyer_profilesScalarFieldEnum = {
  buyer_profile_id: 'buyer_profile_id',
  user_id: 'user_id',
  reseller_tax_id: 'reseller_tax_id',
  verification_status: 'verification_status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Catalog_listing_imagesScalarFieldEnum = {
  catalog_listing_image_id: 'catalog_listing_image_id',
  catalog_listing_id: 'catalog_listing_id',
  image_id: 'image_id'
};

exports.Prisma.Catalog_listing_visibility_rulesScalarFieldEnum = {
  rule_id: 'rule_id',
  catalog_listing_id: 'catalog_listing_id',
  rule_type: 'rule_type',
  rule_value: 'rule_value',
  is_inclusion: 'is_inclusion',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Catalog_listingsScalarFieldEnum = {
  catalog_listing_id: 'catalog_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  description: 'description',
  category: 'category',
  category2: 'category2',
  category3: 'category3',
  subcategory: 'subcategory',
  subcategory2: 'subcategory2',
  subcategory3: 'subcategory3',
  subcategory4: 'subcategory4',
  subcategory5: 'subcategory5',
  status: 'status',
  default_image_url: 'default_image_url',
  listing_condition: 'listing_condition',
  cosmetic_condition: 'cosmetic_condition',
  packaging: 'packaging',
  shipping_window: 'shipping_window',
  minimum_order_value: 'minimum_order_value',
  location_address_id: 'location_address_id',
  is_private: 'is_private',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  minimum_order_value_currency: 'minimum_order_value_currency',
  duplicate_check_hash: 'duplicate_check_hash',
  sub_heading: 'sub_heading'
};

exports.Prisma.Catalog_offer_item_changesScalarFieldEnum = {
  catalog_offer_item_change_id: 'catalog_offer_item_change_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_offer_item_id: 'catalog_offer_item_id',
  change_type: 'change_type',
  changed_by_user_id: 'changed_by_user_id',
  negotiation_round: 'negotiation_round',
  new_catalog_product_id: 'new_catalog_product_id',
  new_catalog_product_variant_id: 'new_catalog_product_variant_id',
  new_requested_quantity: 'new_requested_quantity',
  new_buyer_offer_price: 'new_buyer_offer_price',
  new_buyer_offer_price_currency: 'new_buyer_offer_price_currency',
  previous_quantity: 'previous_quantity',
  new_quantity: 'new_quantity',
  previous_buyer_price: 'previous_buyer_price',
  new_buyer_price: 'new_buyer_price',
  change_reason: 'change_reason',
  created_at: 'created_at',
  public_id: 'public_id',
  previous_price: 'previous_price',
  previous_price_currency: 'previous_price_currency',
  change_summary: 'change_summary',
  auto_generated: 'auto_generated',
  system_action: 'system_action'
};

exports.Prisma.Catalog_offer_itemsScalarFieldEnum = {
  catalog_offer_item_id: 'catalog_offer_item_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_product_id: 'catalog_product_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  requested_quantity: 'requested_quantity',
  seller_offer_price: 'seller_offer_price',
  seller_offer_price_currency: 'seller_offer_price_currency',
  buyer_offer_price: 'buyer_offer_price',
  buyer_offer_price_currency: 'buyer_offer_price_currency',
  current_buyer_negotiation_id: 'current_buyer_negotiation_id',
  current_seller_negotiation_id: 'current_seller_negotiation_id',
  negotiation_status: 'negotiation_status',
  item_version: 'item_version',
  item_status: 'item_status',
  replaced_by_item_id: 'replaced_by_item_id',
  added_in_round: 'added_in_round',
  removed_in_round: 'removed_in_round',
  created_at: 'created_at',
  updated_at: 'updated_at',
  final_agreed_price: 'final_agreed_price',
  final_agreed_price_currency: 'final_agreed_price_currency',
  final_agreed_quantity: 'final_agreed_quantity',
  agreed_at: 'agreed_at',
  public_id: 'public_id'
};

exports.Prisma.Catalog_offer_negotiationsScalarFieldEnum = {
  catalog_offer_negotiation_id: 'catalog_offer_negotiation_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_offer_item_id: 'catalog_offer_item_id',
  parent_negotiation_id: 'parent_negotiation_id',
  negotiation_round: 'negotiation_round',
  is_current_offer: 'is_current_offer',
  action_type: 'action_type',
  offered_by_user_id: 'offered_by_user_id',
  offer_price_per_unit: 'offer_price_per_unit',
  offer_price_currency: 'offer_price_currency',
  offer_quantity: 'offer_quantity',
  offer_status: 'offer_status',
  offer_message: 'offer_message',
  valid_until: 'valid_until',
  responded_at: 'responded_at',
  includes_item_changes: 'includes_item_changes',
  item_change_summary: 'item_change_summary',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  expires_at: 'expires_at',
  auto_expired: 'auto_expired',
  auto_accepted: 'auto_accepted',
  auto_accept_reason: 'auto_accept_reason',
  system_generated: 'system_generated'
};

exports.Prisma.Catalog_offersScalarFieldEnum = {
  catalog_offer_id: 'catalog_offer_id',
  catalog_listing_id: 'catalog_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  offer_status: 'offer_status',
  total_offer_value: 'total_offer_value',
  total_offer_value_currency: 'total_offer_value_currency',
  created_at: 'created_at',
  updated_at: 'updated_at',
  expires_at: 'expires_at',
  public_id: 'public_id',
  current_round: 'current_round',
  last_action_by_user_id: 'last_action_by_user_id',
  last_action_at: 'last_action_at',
  rejection_reason: 'rejection_reason',
  rejection_category: 'rejection_category',
  rejected_at: 'rejected_at',
  rejected_by_user_id: 'rejected_by_user_id',
  reopen_deadline: 'reopen_deadline',
  can_reopen: 'can_reopen',
  auto_expire_at: 'auto_expire_at',
  expired_reason: 'expired_reason',
  offer_message: 'offer_message'
};

exports.Prisma.Catalog_product_imagesScalarFieldEnum = {
  catalog_product_image_id: 'catalog_product_image_id',
  catalog_product_id: 'catalog_product_id',
  image_id: 'image_id'
};

exports.Prisma.Catalog_product_variant_attributesScalarFieldEnum = {
  catalog_product_variant_attribute_id: 'catalog_product_variant_attribute_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  variant_attribute_id: 'variant_attribute_id',
  attribute_value: 'attribute_value',
  created_at: 'created_at'
};

exports.Prisma.Catalog_product_variant_imagesScalarFieldEnum = {
  catalog_product_variant_image_id: 'catalog_product_variant_image_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  image_id: 'image_id',
  is_primary: 'is_primary',
  sort_order: 'sort_order',
  created_at: 'created_at'
};

exports.Prisma.Catalog_product_variantsScalarFieldEnum = {
  catalog_product_variant_id: 'catalog_product_variant_id',
  parent_product_id: 'parent_product_id',
  variant_sku: 'variant_sku',
  variant_name: 'variant_name',
  title: 'title',
  description: 'description',
  category: 'category',
  category2: 'category2',
  category3: 'category3',
  subcategory: 'subcategory',
  subcategory2: 'subcategory2',
  subcategory3: 'subcategory3',
  subcategory4: 'subcategory4',
  subcategory5: 'subcategory5',
  model_name: 'model_name',
  packaging: 'packaging',
  accessories: 'accessories',
  is_hazmat: 'is_hazmat',
  retail_price: 'retail_price',
  offer_price: 'offer_price',
  available_quantity: 'available_quantity',
  min_order_quantity: 'min_order_quantity',
  max_order_quantity: 'max_order_quantity',
  weight: 'weight',
  weight_unit_type: 'weight_unit_type',
  product_height: 'product_height',
  product_length: 'product_length',
  product_width: 'product_width',
  length_unit_type: 'length_unit_type',
  identifier: 'identifier',
  identifier_type: 'identifier_type',
  external_identifier: 'external_identifier',
  external_identifier_type: 'external_identifier_type',
  part_number: 'part_number',
  default_image_url: 'default_image_url',
  product_condition: 'product_condition',
  cosmetic_condition: 'cosmetic_condition',
  is_active: 'is_active',
  sort_order: 'sort_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  retail_price_currency: 'retail_price_currency',
  offer_price_currency: 'offer_price_currency',
  case_pack: 'case_pack',
  case_weight_type: 'case_weight_type',
  case_weight: 'case_weight',
  case_dimension_type: 'case_dimension_type',
  case_length: 'case_length',
  case_width: 'case_width',
  case_height: 'case_height'
};

exports.Prisma.Catalog_productsScalarFieldEnum = {
  catalog_product_id: 'catalog_product_id',
  catalog_listing_id: 'catalog_listing_id',
  title: 'title',
  description: 'description',
  category: 'category',
  category2: 'category2',
  category3: 'category3',
  subcategory: 'subcategory',
  subcategory2: 'subcategory2',
  subcategory3: 'subcategory3',
  subcategory4: 'subcategory4',
  subcategory5: 'subcategory5',
  brand_id: 'brand_id',
  product_condition: 'product_condition',
  cosmetic_condition: 'cosmetic_condition',
  default_image_url: 'default_image_url',
  sku: 'sku',
  external_identifier: 'external_identifier',
  external_identifier_type: 'external_identifier_type',
  part_number: 'part_number',
  model_name: 'model_name',
  packaging: 'packaging',
  retail_price: 'retail_price',
  offer_price: 'offer_price',
  min_order_quantity: 'min_order_quantity',
  max_order_quantity: 'max_order_quantity',
  weight: 'weight',
  weight_unit_type: 'weight_unit_type',
  product_height: 'product_height',
  product_length: 'product_length',
  product_width: 'product_width',
  length_unit_type: 'length_unit_type',
  accessories: 'accessories',
  is_hazmat: 'is_hazmat',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  retail_price_currency: 'retail_price_currency',
  offer_price_currency: 'offer_price_currency',
  case_pack: 'case_pack',
  case_weight_type: 'case_weight_type',
  case_weight: 'case_weight',
  case_dimension_type: 'case_dimension_type',
  case_length: 'case_length',
  case_width: 'case_width',
  case_height: 'case_height'
};

exports.Prisma.ImagesScalarFieldEnum = {
  image_id: 'image_id',
  image_url: 'image_url',
  alt_text: 'alt_text',
  sort_order: 'sort_order',
  created_at: 'created_at',
  original_url: 'original_url',
  s3_key: 's3_key',
  public_id: 'public_id',
  original_s3_key: 'original_s3_key',
  original_image_url: 'original_image_url'
};

exports.Prisma.Order_itemsScalarFieldEnum = {
  order_item_id: 'order_item_id',
  order_id: 'order_id',
  auction_listing_product_manifest_id: 'auction_listing_product_manifest_id',
  catalog_product_id: 'catalog_product_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  final_negotiation_id: 'final_negotiation_id',
  quantity: 'quantity',
  unit_price: 'unit_price',
  unit_price_currency: 'unit_price_currency',
  total_price: 'total_price',
  total_price_currency: 'total_price_currency',
  created_at: 'created_at',
  lot_listing_product_manifest_id: 'lot_listing_product_manifest_id'
};

exports.Prisma.Order_status_historyScalarFieldEnum = {
  order_status_history_id: 'order_status_history_id',
  order_id: 'order_id',
  previous_status: 'previous_status',
  new_status: 'new_status',
  changed_by_user_id: 'changed_by_user_id',
  change_reason: 'change_reason',
  timestamp: 'timestamp'
};

exports.Prisma.OrdersScalarFieldEnum = {
  order_id: 'order_id',
  order_number: 'order_number',
  seller_order_number: 'seller_order_number',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  auction_listing_id: 'auction_listing_id',
  catalog_offer_id: 'catalog_offer_id',
  order_type: 'order_type',
  order_status: 'order_status',
  total_amount: 'total_amount',
  total_amount_currency: 'total_amount_currency',
  shipping_cost: 'shipping_cost',
  shipping_cost_currency: 'shipping_cost_currency',
  tax_amount: 'tax_amount',
  tax_amount_currency: 'tax_amount_currency',
  shipping_address_id: 'shipping_address_id',
  billing_address_id: 'billing_address_id',
  payment_due_date: 'payment_due_date',
  shipping_date: 'shipping_date',
  delivery_date: 'delivery_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  lot_offer_id: 'lot_offer_id'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  payment_id: 'payment_id',
  order_id: 'order_id',
  payment_method: 'payment_method',
  payment_provider: 'payment_provider',
  payment_provider_transaction_id: 'payment_provider_transaction_id',
  payment_amount: 'payment_amount',
  payment_amount_currency: 'payment_amount_currency',
  payment_status: 'payment_status',
  payment_date: 'payment_date',
  processed_at: 'processed_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Resale_certificatesScalarFieldEnum = {
  resale_certificate_id: 'resale_certificate_id',
  user_id: 'user_id',
  certificate_number: 'certificate_number',
  issuing_state: 'issuing_state',
  issuing_jurisdiction: 'issuing_jurisdiction',
  certificate_status: 'certificate_status',
  business_legal_name: 'business_legal_name',
  business_street_address: 'business_street_address',
  business_city: 'business_city',
  business_state: 'business_state',
  business_zip_code: 'business_zip_code',
  business_country: 'business_country',
  federal_tax_id: 'federal_tax_id',
  state_tax_id: 'state_tax_id',
  business_entity_type: 'business_entity_type',
  naics_code: 'naics_code',
  industry_description: 'industry_description',
  issue_date: 'issue_date',
  expiration_date: 'expiration_date',
  renewal_date: 'renewal_date',
  is_blanket_certificate: 'is_blanket_certificate',
  authorized_signatory_name: 'authorized_signatory_name',
  authorized_signatory_title: 'authorized_signatory_title',
  signature_date: 'signature_date',
  verification_status: 'verification_status',
  last_verification_date: 'last_verification_date',
  verification_method: 'verification_method',
  product_categories_covered: 'product_categories_covered',
  document_storage_path: 'document_storage_path',
  document_url: 'document_url',
  compliance_notes: 'compliance_notes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Seller_order_countersScalarFieldEnum = {
  seller_order_counter_id: 'seller_order_counter_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  year: 'year',
  last_order_number: 'last_order_number',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Seller_profile_preferencesScalarFieldEnum = {
  seller_profile_preference_id: 'seller_profile_preference_id',
  seller_profile_id: 'seller_profile_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Seller_profilesScalarFieldEnum = {
  seller_profile_id: 'seller_profile_id',
  user_id: 'user_id',
  last_active: 'last_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.User_addressesScalarFieldEnum = {
  user_address_id: 'user_address_id',
  user_id: 'user_id',
  address_id: 'address_id',
  address_type: 'address_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_preferencesScalarFieldEnum = {
  user_preference_id: 'user_preference_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  username: 'username',
  cognito_id: 'cognito_id',
  user_type: 'user_type',
  email: 'email',
  phone: 'phone',
  title: 'title',
  first_name: 'first_name',
  last_name: 'last_name',
  date_of_birth: 'date_of_birth',
  company: 'company',
  avatar_url: 'avatar_url',
  account_locked: 'account_locked',
  risk_score: 'risk_score',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  job_title: 'job_title'
};

exports.Prisma.Variant_attribute_valuesScalarFieldEnum = {
  variant_attribute_value_id: 'variant_attribute_value_id',
  variant_attribute_id: 'variant_attribute_id',
  value: 'value',
  display_value: 'display_value',
  color_hex: 'color_hex',
  sort_order: 'sort_order',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Variant_attributesScalarFieldEnum = {
  variant_attribute_id: 'variant_attribute_id',
  name: 'name',
  display_name: 'display_name',
  attribute_type: 'attribute_type',
  is_required: 'is_required',
  sort_order: 'sort_order',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Catalog_offer_alternative_suggestionsScalarFieldEnum = {
  suggestion_id: 'suggestion_id',
  catalog_offer_id: 'catalog_offer_id',
  suggested_product_variant_id: 'suggested_product_variant_id',
  suggested_price: 'suggested_price',
  suggested_price_currency: 'suggested_price_currency',
  available_quantity: 'available_quantity',
  product_name: 'product_name',
  suggestion_message: 'suggestion_message',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Catalog_offer_audit_logScalarFieldEnum = {
  audit_id: 'audit_id',
  catalog_offer_id: 'catalog_offer_id',
  action_type: 'action_type',
  performed_by_user_id: 'performed_by_user_id',
  old_status: 'old_status',
  new_status: 'new_status',
  changes_summary: 'changes_summary',
  metadata: 'metadata',
  created_at: 'created_at',
  public_id: 'public_id',
  system_generated: 'system_generated',
  auto_action_type: 'auto_action_type'
};

exports.Prisma.Catalog_offer_minimum_termsScalarFieldEnum = {
  minimum_terms_id: 'minimum_terms_id',
  catalog_offer_id: 'catalog_offer_id',
  minimum_unit_price: 'minimum_unit_price',
  minimum_total_order: 'minimum_total_order',
  minimum_quantity: 'minimum_quantity',
  currency_code: 'currency_code',
  minimum_order_frequency: 'minimum_order_frequency',
  payment_terms: 'payment_terms',
  delivery_requirements: 'delivery_requirements',
  terms_message: 'terms_message',
  valid_until: 'valid_until',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Buyer_brand_preferencesScalarFieldEnum = {
  buyer_brand_preference_id: 'buyer_brand_preference_id',
  buyer_profile_id: 'buyer_profile_id',
  brand_id: 'brand_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Lot_listing_imagesScalarFieldEnum = {
  lot_listing_image_id: 'lot_listing_image_id',
  lot_listing_id: 'lot_listing_id',
  image_id: 'image_id'
};

exports.Prisma.Lot_listing_product_manifestsScalarFieldEnum = {
  lot_listing_product_manifest_id: 'lot_listing_product_manifest_id',
  lot_listing_id: 'lot_listing_id',
  category: 'category',
  subcategory: 'subcategory',
  title: 'title',
  description: 'description',
  brand_id: 'brand_id',
  sku: 'sku',
  identifier: 'identifier',
  identifier_type: 'identifier_type',
  external_identifier: 'external_identifier',
  external_identifier_type: 'external_identifier_type',
  part_number: 'part_number',
  model_name: 'model_name',
  product_condition: 'product_condition',
  cosmetic_condition: 'cosmetic_condition',
  available_quantity: 'available_quantity',
  retail_price: 'retail_price',
  retail_price_currency: 'retail_price_currency',
  ext_retail: 'ext_retail',
  ext_retail_currency: 'ext_retail_currency',
  is_hazmat: 'is_hazmat',
  lot_id: 'lot_id',
  pallet_id: 'pallet_id',
  department: 'department',
  accessories: 'accessories',
  weight: 'weight',
  product_weight_type: 'product_weight_type',
  product_height: 'product_height',
  product_length: 'product_length',
  product_width: 'product_width',
  product_length_type: 'product_length_type',
  case_pack: 'case_pack',
  case_weight_type: 'case_weight_type',
  case_weight: 'case_weight',
  case_dimension_type: 'case_dimension_type',
  case_length: 'case_length',
  case_width: 'case_width',
  case_height: 'case_height',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Lot_listing_tagsScalarFieldEnum = {
  lot_listing_id: 'lot_listing_id',
  tag_id: 'tag_id',
  created_at: 'created_at'
};

exports.Prisma.Lot_listing_visibility_rulesScalarFieldEnum = {
  rule_id: 'rule_id',
  lot_listing_id: 'lot_listing_id',
  rule_type: 'rule_type',
  rule_value: 'rule_value',
  is_inclusion: 'is_inclusion',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Lot_listingsScalarFieldEnum = {
  lot_listing_id: 'lot_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  short_title: 'short_title',
  sub_heading: 'sub_heading',
  description: 'description',
  short_description: 'short_description',
  listing_label: 'listing_label',
  listing_type: 'listing_type',
  source_type: 'source_type',
  source_name: 'source_name',
  category: 'category',
  category2: 'category2',
  category3: 'category3',
  subcategory: 'subcategory',
  subcategory2: 'subcategory2',
  subcategory3: 'subcategory3',
  subcategory4: 'subcategory4',
  subcategory5: 'subcategory5',
  category_percent_estimates: 'category_percent_estimates',
  status: 'status',
  default_image_url: 'default_image_url',
  lot_condition: 'lot_condition',
  cosmetic_condition: 'cosmetic_condition',
  sample_sku_details: 'sample_sku_details',
  manifest_snapshot_file_s3_key: 'manifest_snapshot_file_s3_key',
  load_type: 'load_type',
  expiry_date: 'expiry_date',
  total_units: 'total_units',
  estimated_case_packs: 'estimated_case_packs',
  piece_count: 'piece_count',
  estimated_retail_value: 'estimated_retail_value',
  estimated_retail_value_currency: 'estimated_retail_value_currency',
  asking_price: 'asking_price',
  asking_price_currency: 'asking_price_currency',
  shipping_cost: 'shipping_cost',
  shipping_cost_currency: 'shipping_cost_currency',
  estimated_weight: 'estimated_weight',
  weight_type: 'weight_type',
  location_address_id: 'location_address_id',
  lot_shipping_type: 'lot_shipping_type',
  lot_freight_type: 'lot_freight_type',
  lot_packaging: 'lot_packaging',
  number_of_pallets: 'number_of_pallets',
  pallet_spaces: 'pallet_spaces',
  pallet_length: 'pallet_length',
  pallet_width: 'pallet_width',
  pallet_height: 'pallet_height',
  pallet_dimension_type: 'pallet_dimension_type',
  pallet_stackable: 'pallet_stackable',
  number_of_truckloads: 'number_of_truckloads',
  number_of_shipments: 'number_of_shipments',
  is_refrigerated: 'is_refrigerated',
  is_fda_registered: 'is_fda_registered',
  is_hazmat: 'is_hazmat',
  is_private: 'is_private',
  resale_requirement: 'resale_requirement',
  accessories: 'accessories',
  inspection_status: 'inspection_status',
  seller_notes: 'seller_notes',
  shipping_notes: 'shipping_notes',
  additional_information: 'additional_information',
  offer_requirements: 'offer_requirements',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id',
  category4: 'category4',
  category5: 'category5'
};

exports.Prisma.Lot_offer_audit_logScalarFieldEnum = {
  audit_id: 'audit_id',
  lot_offer_id: 'lot_offer_id',
  action_type: 'action_type',
  performed_by_user_id: 'performed_by_user_id',
  old_status: 'old_status',
  new_status: 'new_status',
  changes_summary: 'changes_summary',
  metadata: 'metadata',
  system_generated: 'system_generated',
  created_at: 'created_at',
  public_id: 'public_id'
};

exports.Prisma.Lot_offer_negotiationsScalarFieldEnum = {
  lot_offer_negotiation_id: 'lot_offer_negotiation_id',
  lot_offer_id: 'lot_offer_id',
  parent_negotiation_id: 'parent_negotiation_id',
  negotiation_round: 'negotiation_round',
  is_current_offer: 'is_current_offer',
  action_type: 'action_type',
  offered_by_user_id: 'offered_by_user_id',
  offer_amount: 'offer_amount',
  offer_amount_currency: 'offer_amount_currency',
  offer_status: 'offer_status',
  offer_message: 'offer_message',
  valid_until: 'valid_until',
  responded_at: 'responded_at',
  expires_at: 'expires_at',
  auto_expired: 'auto_expired',
  auto_accepted: 'auto_accepted',
  auto_accept_reason: 'auto_accept_reason',
  system_generated: 'system_generated',
  created_at: 'created_at',
  updated_at: 'updated_at',
  public_id: 'public_id'
};

exports.Prisma.Lot_offersScalarFieldEnum = {
  lot_offer_id: 'lot_offer_id',
  lot_listing_id: 'lot_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  offer_status: 'offer_status',
  offer_amount: 'offer_amount',
  offer_amount_currency: 'offer_amount_currency',
  current_round: 'current_round',
  last_action_by_user_id: 'last_action_by_user_id',
  last_action_at: 'last_action_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  expires_at: 'expires_at',
  auto_expire_at: 'auto_expire_at',
  expired_reason: 'expired_reason',
  rejection_reason: 'rejection_reason',
  rejection_category: 'rejection_category',
  rejected_at: 'rejected_at',
  rejected_by_user_id: 'rejected_by_user_id',
  reopen_deadline: 'reopen_deadline',
  can_reopen: 'can_reopen',
  offer_message: 'offer_message',
  public_id: 'public_id'
};

exports.Prisma.TagsScalarFieldEnum = {
  tag_id: 'tag_id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  category: 'category',
  color: 'color',
  is_active: 'is_active',
  usage_count: 'usage_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.addressesOrderByRelevanceFieldEnum = {
  address_id: 'address_id',
  first_name: 'first_name',
  last_name: 'last_name',
  address1: 'address1',
  address2: 'address2',
  address3: 'address3',
  city: 'city',
  province: 'province',
  province_code: 'province_code',
  country: 'country',
  country_code: 'country_code',
  zip: 'zip',
  phone: 'phone',
  company: 'company',
  public_id: 'public_id'
};

exports.Prisma.auction_bid_historyOrderByRelevanceFieldEnum = {
  auction_bid_history_id: 'auction_bid_history_id',
  auction_listing_id: 'auction_listing_id',
  bidder_user_id: 'bidder_user_id'
};

exports.Prisma.auction_bidsOrderByRelevanceFieldEnum = {
  auction_bid_id: 'auction_bid_id',
  auction_listing_id: 'auction_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  bidder_user_id: 'bidder_user_id',
  bidder_buyer_profile_id: 'bidder_buyer_profile_id',
  public_id: 'public_id'
};

exports.Prisma.auction_listing_imagesOrderByRelevanceFieldEnum = {
  auction_listing_image_id: 'auction_listing_image_id',
  auction_listing_id: 'auction_listing_id',
  image_id: 'image_id'
};

exports.Prisma.auction_listing_product_manifestsOrderByRelevanceFieldEnum = {
  auction_listing_product_manifest_id: 'auction_listing_product_manifest_id',
  auction_listing_id: 'auction_listing_id',
  title: 'title',
  description: 'description',
  brand_id: 'brand_id',
  sku: 'sku',
  identifier: 'identifier',
  external_identifier: 'external_identifier',
  part_number: 'part_number',
  model_name: 'model_name',
  cosmetic_condition: 'cosmetic_condition',
  lot_id: 'lot_id',
  pallet_id: 'pallet_id',
  department: 'department',
  accessories: 'accessories'
};

exports.Prisma.auction_listing_visibility_rulesOrderByRelevanceFieldEnum = {
  rule_id: 'rule_id',
  auction_listing_id: 'auction_listing_id',
  rule_value: 'rule_value'
};

exports.Prisma.auction_listingsOrderByRelevanceFieldEnum = {
  auction_listing_id: 'auction_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  description: 'description',
  default_image_url: 'default_image_url',
  cosmetic_condition: 'cosmetic_condition',
  location_address_id: 'location_address_id',
  resale_requirement: 'resale_requirement',
  accessories: 'accessories',
  inspection_status: 'inspection_status',
  seller_notes: 'seller_notes',
  shipping_notes: 'shipping_notes',
  additional_information: 'additional_information',
  bidding_requirements: 'bidding_requirements',
  winner_user_id: 'winner_user_id',
  winner_buyer_profile_id: 'winner_buyer_profile_id',
  current_bidder_user_id: 'current_bidder_user_id',
  current_bidder_buyer_profile_id: 'current_bidder_buyer_profile_id',
  public_id: 'public_id',
  short_title: 'short_title'
};

exports.Prisma.brandsOrderByRelevanceFieldEnum = {
  brand_id: 'brand_id',
  brand_name: 'brand_name',
  brand_description: 'brand_description',
  brand_website: 'brand_website',
  public_id: 'public_id'
};

exports.Prisma.buyer_profile_preferencesOrderByRelevanceFieldEnum = {
  buyer_profile_preference_id: 'buyer_profile_preference_id',
  buyer_profile_id: 'buyer_profile_id',
  user_id: 'user_id'
};

exports.Prisma.buyer_profilesOrderByRelevanceFieldEnum = {
  buyer_profile_id: 'buyer_profile_id',
  user_id: 'user_id',
  reseller_tax_id: 'reseller_tax_id',
  public_id: 'public_id'
};

exports.Prisma.catalog_listing_imagesOrderByRelevanceFieldEnum = {
  catalog_listing_image_id: 'catalog_listing_image_id',
  catalog_listing_id: 'catalog_listing_id',
  image_id: 'image_id'
};

exports.Prisma.catalog_listing_visibility_rulesOrderByRelevanceFieldEnum = {
  rule_id: 'rule_id',
  catalog_listing_id: 'catalog_listing_id',
  rule_value: 'rule_value'
};

exports.Prisma.catalog_listingsOrderByRelevanceFieldEnum = {
  catalog_listing_id: 'catalog_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  description: 'description',
  default_image_url: 'default_image_url',
  cosmetic_condition: 'cosmetic_condition',
  location_address_id: 'location_address_id',
  public_id: 'public_id',
  duplicate_check_hash: 'duplicate_check_hash',
  sub_heading: 'sub_heading'
};

exports.Prisma.catalog_offer_item_changesOrderByRelevanceFieldEnum = {
  catalog_offer_item_change_id: 'catalog_offer_item_change_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_offer_item_id: 'catalog_offer_item_id',
  changed_by_user_id: 'changed_by_user_id',
  new_catalog_product_id: 'new_catalog_product_id',
  new_catalog_product_variant_id: 'new_catalog_product_variant_id',
  change_reason: 'change_reason',
  public_id: 'public_id',
  change_summary: 'change_summary'
};

exports.Prisma.catalog_offer_itemsOrderByRelevanceFieldEnum = {
  catalog_offer_item_id: 'catalog_offer_item_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_product_id: 'catalog_product_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  current_buyer_negotiation_id: 'current_buyer_negotiation_id',
  current_seller_negotiation_id: 'current_seller_negotiation_id',
  replaced_by_item_id: 'replaced_by_item_id',
  public_id: 'public_id'
};

exports.Prisma.catalog_offer_negotiationsOrderByRelevanceFieldEnum = {
  catalog_offer_negotiation_id: 'catalog_offer_negotiation_id',
  catalog_offer_id: 'catalog_offer_id',
  catalog_offer_item_id: 'catalog_offer_item_id',
  parent_negotiation_id: 'parent_negotiation_id',
  offered_by_user_id: 'offered_by_user_id',
  offer_message: 'offer_message',
  item_change_summary: 'item_change_summary',
  public_id: 'public_id',
  auto_accept_reason: 'auto_accept_reason'
};

exports.Prisma.catalog_offersOrderByRelevanceFieldEnum = {
  catalog_offer_id: 'catalog_offer_id',
  catalog_listing_id: 'catalog_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  public_id: 'public_id',
  last_action_by_user_id: 'last_action_by_user_id',
  rejection_reason: 'rejection_reason',
  rejected_by_user_id: 'rejected_by_user_id',
  expired_reason: 'expired_reason',
  offer_message: 'offer_message'
};

exports.Prisma.catalog_product_imagesOrderByRelevanceFieldEnum = {
  catalog_product_image_id: 'catalog_product_image_id',
  catalog_product_id: 'catalog_product_id',
  image_id: 'image_id'
};

exports.Prisma.catalog_product_variant_attributesOrderByRelevanceFieldEnum = {
  catalog_product_variant_attribute_id: 'catalog_product_variant_attribute_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  variant_attribute_id: 'variant_attribute_id',
  attribute_value: 'attribute_value'
};

exports.Prisma.catalog_product_variant_imagesOrderByRelevanceFieldEnum = {
  catalog_product_variant_image_id: 'catalog_product_variant_image_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  image_id: 'image_id'
};

exports.Prisma.catalog_product_variantsOrderByRelevanceFieldEnum = {
  catalog_product_variant_id: 'catalog_product_variant_id',
  parent_product_id: 'parent_product_id',
  variant_sku: 'variant_sku',
  variant_name: 'variant_name',
  title: 'title',
  description: 'description',
  model_name: 'model_name',
  accessories: 'accessories',
  identifier: 'identifier',
  external_identifier: 'external_identifier',
  part_number: 'part_number',
  default_image_url: 'default_image_url',
  cosmetic_condition: 'cosmetic_condition',
  public_id: 'public_id'
};

exports.Prisma.catalog_productsOrderByRelevanceFieldEnum = {
  catalog_product_id: 'catalog_product_id',
  catalog_listing_id: 'catalog_listing_id',
  title: 'title',
  description: 'description',
  brand_id: 'brand_id',
  cosmetic_condition: 'cosmetic_condition',
  default_image_url: 'default_image_url',
  sku: 'sku',
  external_identifier: 'external_identifier',
  part_number: 'part_number',
  model_name: 'model_name',
  accessories: 'accessories',
  public_id: 'public_id'
};

exports.Prisma.imagesOrderByRelevanceFieldEnum = {
  image_id: 'image_id',
  image_url: 'image_url',
  alt_text: 'alt_text',
  original_url: 'original_url',
  s3_key: 's3_key',
  public_id: 'public_id',
  original_s3_key: 'original_s3_key',
  original_image_url: 'original_image_url'
};

exports.Prisma.order_itemsOrderByRelevanceFieldEnum = {
  order_item_id: 'order_item_id',
  order_id: 'order_id',
  auction_listing_product_manifest_id: 'auction_listing_product_manifest_id',
  catalog_product_id: 'catalog_product_id',
  catalog_product_variant_id: 'catalog_product_variant_id',
  final_negotiation_id: 'final_negotiation_id',
  lot_listing_product_manifest_id: 'lot_listing_product_manifest_id'
};

exports.Prisma.order_status_historyOrderByRelevanceFieldEnum = {
  order_status_history_id: 'order_status_history_id',
  order_id: 'order_id',
  changed_by_user_id: 'changed_by_user_id',
  change_reason: 'change_reason'
};

exports.Prisma.ordersOrderByRelevanceFieldEnum = {
  order_id: 'order_id',
  order_number: 'order_number',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  auction_listing_id: 'auction_listing_id',
  catalog_offer_id: 'catalog_offer_id',
  shipping_address_id: 'shipping_address_id',
  billing_address_id: 'billing_address_id',
  public_id: 'public_id',
  lot_offer_id: 'lot_offer_id'
};

exports.Prisma.paymentsOrderByRelevanceFieldEnum = {
  payment_id: 'payment_id',
  order_id: 'order_id',
  payment_provider: 'payment_provider',
  payment_provider_transaction_id: 'payment_provider_transaction_id',
  public_id: 'public_id'
};

exports.Prisma.resale_certificatesOrderByRelevanceFieldEnum = {
  resale_certificate_id: 'resale_certificate_id',
  user_id: 'user_id',
  certificate_number: 'certificate_number',
  issuing_jurisdiction: 'issuing_jurisdiction',
  business_legal_name: 'business_legal_name',
  business_street_address: 'business_street_address',
  business_city: 'business_city',
  business_zip_code: 'business_zip_code',
  federal_tax_id: 'federal_tax_id',
  state_tax_id: 'state_tax_id',
  naics_code: 'naics_code',
  industry_description: 'industry_description',
  authorized_signatory_name: 'authorized_signatory_name',
  authorized_signatory_title: 'authorized_signatory_title',
  product_categories_covered: 'product_categories_covered',
  document_storage_path: 'document_storage_path',
  document_url: 'document_url',
  compliance_notes: 'compliance_notes',
  public_id: 'public_id'
};

exports.Prisma.seller_order_countersOrderByRelevanceFieldEnum = {
  seller_order_counter_id: 'seller_order_counter_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id'
};

exports.Prisma.seller_profile_preferencesOrderByRelevanceFieldEnum = {
  seller_profile_preference_id: 'seller_profile_preference_id',
  seller_profile_id: 'seller_profile_id',
  user_id: 'user_id'
};

exports.Prisma.seller_profilesOrderByRelevanceFieldEnum = {
  seller_profile_id: 'seller_profile_id',
  user_id: 'user_id',
  public_id: 'public_id'
};

exports.Prisma.user_addressesOrderByRelevanceFieldEnum = {
  user_address_id: 'user_address_id',
  user_id: 'user_id',
  address_id: 'address_id'
};

exports.Prisma.user_preferencesOrderByRelevanceFieldEnum = {
  user_preference_id: 'user_preference_id',
  user_id: 'user_id'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  user_id: 'user_id',
  username: 'username',
  cognito_id: 'cognito_id',
  email: 'email',
  phone: 'phone',
  title: 'title',
  first_name: 'first_name',
  last_name: 'last_name',
  company: 'company',
  avatar_url: 'avatar_url',
  public_id: 'public_id',
  job_title: 'job_title'
};

exports.Prisma.variant_attribute_valuesOrderByRelevanceFieldEnum = {
  variant_attribute_value_id: 'variant_attribute_value_id',
  variant_attribute_id: 'variant_attribute_id',
  value: 'value',
  display_value: 'display_value',
  color_hex: 'color_hex',
  public_id: 'public_id'
};

exports.Prisma.variant_attributesOrderByRelevanceFieldEnum = {
  variant_attribute_id: 'variant_attribute_id',
  name: 'name',
  display_name: 'display_name',
  public_id: 'public_id'
};

exports.Prisma.catalog_offer_alternative_suggestionsOrderByRelevanceFieldEnum = {
  suggestion_id: 'suggestion_id',
  catalog_offer_id: 'catalog_offer_id',
  suggested_product_variant_id: 'suggested_product_variant_id',
  product_name: 'product_name',
  suggestion_message: 'suggestion_message',
  public_id: 'public_id'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.catalog_offer_audit_logOrderByRelevanceFieldEnum = {
  audit_id: 'audit_id',
  catalog_offer_id: 'catalog_offer_id',
  action_type: 'action_type',
  performed_by_user_id: 'performed_by_user_id',
  public_id: 'public_id'
};

exports.Prisma.catalog_offer_minimum_termsOrderByRelevanceFieldEnum = {
  minimum_terms_id: 'minimum_terms_id',
  catalog_offer_id: 'catalog_offer_id',
  minimum_order_frequency: 'minimum_order_frequency',
  payment_terms: 'payment_terms',
  delivery_requirements: 'delivery_requirements',
  terms_message: 'terms_message',
  public_id: 'public_id'
};

exports.Prisma.buyer_brand_preferencesOrderByRelevanceFieldEnum = {
  buyer_brand_preference_id: 'buyer_brand_preference_id',
  buyer_profile_id: 'buyer_profile_id',
  brand_id: 'brand_id',
  public_id: 'public_id'
};

exports.Prisma.lot_listing_imagesOrderByRelevanceFieldEnum = {
  lot_listing_image_id: 'lot_listing_image_id',
  lot_listing_id: 'lot_listing_id',
  image_id: 'image_id'
};

exports.Prisma.lot_listing_product_manifestsOrderByRelevanceFieldEnum = {
  lot_listing_product_manifest_id: 'lot_listing_product_manifest_id',
  lot_listing_id: 'lot_listing_id',
  title: 'title',
  description: 'description',
  brand_id: 'brand_id',
  sku: 'sku',
  identifier: 'identifier',
  external_identifier: 'external_identifier',
  part_number: 'part_number',
  model_name: 'model_name',
  cosmetic_condition: 'cosmetic_condition',
  lot_id: 'lot_id',
  pallet_id: 'pallet_id',
  department: 'department',
  accessories: 'accessories'
};

exports.Prisma.lot_listing_tagsOrderByRelevanceFieldEnum = {
  lot_listing_id: 'lot_listing_id',
  tag_id: 'tag_id'
};

exports.Prisma.lot_listing_visibility_rulesOrderByRelevanceFieldEnum = {
  rule_id: 'rule_id',
  lot_listing_id: 'lot_listing_id',
  rule_value: 'rule_value'
};

exports.Prisma.lot_listingsOrderByRelevanceFieldEnum = {
  lot_listing_id: 'lot_listing_id',
  seller_profile_id: 'seller_profile_id',
  seller_user_id: 'seller_user_id',
  title: 'title',
  short_title: 'short_title',
  sub_heading: 'sub_heading',
  description: 'description',
  short_description: 'short_description',
  listing_label: 'listing_label',
  default_image_url: 'default_image_url',
  cosmetic_condition: 'cosmetic_condition',
  sample_sku_details: 'sample_sku_details',
  manifest_snapshot_file_s3_key: 'manifest_snapshot_file_s3_key',
  location_address_id: 'location_address_id',
  resale_requirement: 'resale_requirement',
  accessories: 'accessories',
  seller_notes: 'seller_notes',
  shipping_notes: 'shipping_notes',
  additional_information: 'additional_information',
  offer_requirements: 'offer_requirements',
  public_id: 'public_id'
};

exports.Prisma.lot_offer_audit_logOrderByRelevanceFieldEnum = {
  audit_id: 'audit_id',
  lot_offer_id: 'lot_offer_id',
  action_type: 'action_type',
  performed_by_user_id: 'performed_by_user_id',
  public_id: 'public_id'
};

exports.Prisma.lot_offer_negotiationsOrderByRelevanceFieldEnum = {
  lot_offer_negotiation_id: 'lot_offer_negotiation_id',
  lot_offer_id: 'lot_offer_id',
  parent_negotiation_id: 'parent_negotiation_id',
  offered_by_user_id: 'offered_by_user_id',
  offer_message: 'offer_message',
  auto_accept_reason: 'auto_accept_reason',
  public_id: 'public_id'
};

exports.Prisma.lot_offersOrderByRelevanceFieldEnum = {
  lot_offer_id: 'lot_offer_id',
  lot_listing_id: 'lot_listing_id',
  seller_user_id: 'seller_user_id',
  seller_profile_id: 'seller_profile_id',
  buyer_user_id: 'buyer_user_id',
  buyer_profile_id: 'buyer_profile_id',
  last_action_by_user_id: 'last_action_by_user_id',
  expired_reason: 'expired_reason',
  rejection_reason: 'rejection_reason',
  rejected_by_user_id: 'rejected_by_user_id',
  offer_message: 'offer_message',
  public_id: 'public_id'
};

exports.Prisma.tagsOrderByRelevanceFieldEnum = {
  tag_id: 'tag_id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  category: 'category',
  color: 'color'
};
exports.currency_code_type = exports.$Enums.currency_code_type = {
  USD: 'USD',
  CAD: 'CAD',
  MXN: 'MXN',
  GBP: 'GBP',
  EUR: 'EUR',
  CHF: 'CHF',
  DKK: 'DKK',
  CZK: 'CZK',
  RUB: 'RUB',
  TRY: 'TRY',
  INR: 'INR',
  CNY: 'CNY',
  HKD: 'HKD',
  ILS: 'ILS',
  KRW: 'KRW',
  SGD: 'SGD',
  JPY: 'JPY',
  AUD: 'AUD',
  NZD: 'NZD'
};

exports.auction_bid_action_type = exports.$Enums.auction_bid_action_type = {
  BID_PLACED: 'BID_PLACED',
  BID_RETRACTED: 'BID_RETRACTED',
  AUCTION_WON: 'AUCTION_WON',
  AUCTION_ENDED: 'AUCTION_ENDED'
};

exports.auction_bid_type = exports.$Enums.auction_bid_type = {
  REGULAR: 'REGULAR',
  BUY_NOW: 'BUY_NOW'
};

exports.product_category_type = exports.$Enums.product_category_type = {
  HOME_KITCHEN_ORGANIZATION: 'HOME_KITCHEN_ORGANIZATION',
  APPAREL: 'APPAREL',
  FOOTWEAR: 'FOOTWEAR',
  APPAREL_ACCESSORIES: 'APPAREL_ACCESSORIES',
  JEWELRY: 'JEWELRY',
  BEAUTY_GROOMING_WELLNESS: 'BEAUTY_GROOMING_WELLNESS',
  CONSUMER_ELECTRONICS: 'CONSUMER_ELECTRONICS',
  MOBILE_ACCESSORIES: 'MOBILE_ACCESSORIES',
  TOYS_GAMES_LEARNING: 'TOYS_GAMES_LEARNING',
  BABY_MATERNITY_KIDS: 'BABY_MATERNITY_KIDS',
  TOOLS_AUTOMOTIVE_INDUSTRIAL: 'TOOLS_AUTOMOTIVE_INDUSTRIAL',
  HEALTH_HOUSEHOLD_CLEANING: 'HEALTH_HOUSEHOLD_CLEANING',
  HEALTH_DEVICES: 'HEALTH_DEVICES',
  PETS: 'PETS',
  GROCERY_SNACKS_BEVERAGES: 'GROCERY_SNACKS_BEVERAGES',
  OFFICE_SCHOOL_STATIONERY: 'OFFICE_SCHOOL_STATIONERY',
  BAGS_LUGGAGE_TRAVEL: 'BAGS_LUGGAGE_TRAVEL',
  OUTDOORS_GARDEN_SPORTING_GOODS: 'OUTDOORS_GARDEN_SPORTING_GOODS',
  SEASONAL_PARTY_GIFTS: 'SEASONAL_PARTY_GIFTS',
  BOOKS_MEDIA_CRAFTS: 'BOOKS_MEDIA_CRAFTS'
};

exports.product_sub_category_type = exports.$Enums.product_sub_category_type = {
  SMALL_APPLIANCES: 'SMALL_APPLIANCES',
  COOKWARE_BAKEWARE: 'COOKWARE_BAKEWARE',
  SERVEWARE_TABLETOP: 'SERVEWARE_TABLETOP',
  KITCHEN_STORAGE_CONTAINERS: 'KITCHEN_STORAGE_CONTAINERS',
  TRASH_CANS_CLEANING_CADDIES: 'TRASH_CANS_CLEANING_CADDIES',
  BEDDING_LINENS: 'BEDDING_LINENS',
  BATH_LINENS_SHOWER_CURTAINS: 'BATH_LINENS_SHOWER_CURTAINS',
  FURNITURE: 'FURNITURE',
  HOME_DECOR: 'HOME_DECOR',
  WALL_ART_FRAMES: 'WALL_ART_FRAMES',
  CURTAINS_WINDOW_TREATMENTS: 'CURTAINS_WINDOW_TREATMENTS',
  RUGS_MATS: 'RUGS_MATS',
  CLOCKS: 'CLOCKS',
  LAUNDRY_HAMPERS_DRYING_RACKS: 'LAUNDRY_HAMPERS_DRYING_RACKS',
  STORAGE_BINS_CLOSET_ORGANIZERS: 'STORAGE_BINS_CLOSET_ORGANIZERS',
  MENS_CLOTHING: 'MENS_CLOTHING',
  WOMENS_CLOTHING: 'WOMENS_CLOTHING',
  KIDS_BABY_CLOTHING: 'KIDS_BABY_CLOTHING',
  SEASONAL_APPAREL: 'SEASONAL_APPAREL',
  UNDERGARMENTS_SLEEPWEAR: 'UNDERGARMENTS_SLEEPWEAR',
  SWIMWEAR: 'SWIMWEAR',
  WORKWEAR_UNIFORMS: 'WORKWEAR_UNIFORMS',
  MENS_SHOES: 'MENS_SHOES',
  WOMENS_SHOES: 'WOMENS_SHOES',
  SOCKS_HOSIERY: 'SOCKS_HOSIERY',
  FOOTWEAR_ACCESSORIES: 'FOOTWEAR_ACCESSORIES',
  BELTS: 'BELTS',
  HATS_BEANIES: 'HATS_BEANIES',
  SCARVES: 'SCARVES',
  GLOVES: 'GLOVES',
  EARRINGS: 'EARRINGS',
  NECKLACES: 'NECKLACES',
  RINGS: 'RINGS',
  BRACELETS: 'BRACELETS',
  COSMETICS: 'COSMETICS',
  HAIRCARE: 'HAIRCARE',
  SKINCARE: 'SKINCARE',
  FRAGRANCES: 'FRAGRANCES',
  FRAGRANCE_SETS_SAMPLERS: 'FRAGRANCE_SETS_SAMPLERS',
  GROOMING_TOOLS: 'GROOMING_TOOLS',
  MENS_GROOMING: 'MENS_GROOMING',
  NAIL_CARE: 'NAIL_CARE',
  ORAL_CARE: 'ORAL_CARE',
  BEAUTY_TOOLS_BRUSHES_MIRRORS_TWEEZERS: 'BEAUTY_TOOLS_BRUSHES_MIRRORS_TWEEZERS',
  TEMPORARY_TATTOOS_BODY_ART: 'TEMPORARY_TATTOOS_BODY_ART',
  CONTACT_LENS_CASES_EYE_DROPS: 'CONTACT_LENS_CASES_EYE_DROPS',
  MASSAGE_WELLNESS_DEVICES: 'MASSAGE_WELLNESS_DEVICES',
  PHONES_TABLETS: 'PHONES_TABLETS',
  LAPTOPS_ACCESSORIES: 'LAPTOPS_ACCESSORIES',
  WEARABLES_SMARTWATCHES: 'WEARABLES_SMARTWATCHES',
  AUDIO_HEADPHONES_SPEAKERS: 'AUDIO_HEADPHONES_SPEAKERS',
  CAMERAS_DRONES: 'CAMERAS_DRONES',
  TVS_TV_ACCESSORIES: 'TVS_TV_ACCESSORIES',
  SMART_HOME_DEVICES_THERMOSTATS_PLUGS_LIGHTING: 'SMART_HOME_DEVICES_THERMOSTATS_PLUGS_LIGHTING',
  EREADERS_TABLETS: 'EREADERS_TABLETS',
  VIDEO_GAME_CONSOLES: 'VIDEO_GAME_CONSOLES',
  GAME_ACCESSORIES: 'GAME_ACCESSORIES',
  DVDS_BLU_RAY: 'DVDS_BLU_RAY',
  SURGE_PROTECTORS_POWER_STRIPS: 'SURGE_PROTECTORS_POWER_STRIPS',
  PROJECTORS_ACCESSORIES: 'PROJECTORS_ACCESSORIES',
  DASH_CAMS_CAR_ELECTRONICS: 'DASH_CAMS_CAR_ELECTRONICS',
  PHONE_CASES: 'PHONE_CASES',
  SCREEN_PROTECTORS: 'SCREEN_PROTECTORS',
  CHARGING_CABLES: 'CHARGING_CABLES',
  POWER_BANKS: 'POWER_BANKS',
  PRESCHOOL_LEARNING: 'PRESCHOOL_LEARNING',
  ACTION_FIGURES_DOLLS: 'ACTION_FIGURES_DOLLS',
  OUTDOOR_TOYS: 'OUTDOOR_TOYS',
  BOARD_GAMES_PUZZLES: 'BOARD_GAMES_PUZZLES',
  BUILDING_SETS_LEGO: 'BUILDING_SETS_LEGO',
  RC_TOYS_VEHICLES: 'RC_TOYS_VEHICLES',
  PLAYSETS_PRETEND_PLAY: 'PLAYSETS_PRETEND_PLAY',
  STEM_EDUCATIONAL_KITS: 'STEM_EDUCATIONAL_KITS',
  FLASH_CARDS_LEARNING_GAMES: 'FLASH_CARDS_LEARNING_GAMES',
  FIDGET_TOYS_SENSORY_KITS: 'FIDGET_TOYS_SENSORY_KITS',
  SLIME_PUTTY: 'SLIME_PUTTY',
  TRADING_CARDS_POKEMON_SPORTS: 'TRADING_CARDS_POKEMON_SPORTS',
  DIAPERS_WIPES: 'DIAPERS_WIPES',
  STROLLERS_CAR_SEATS: 'STROLLERS_CAR_SEATS',
  FEEDING_NURSING: 'FEEDING_NURSING',
  MATERNITY_WEAR: 'MATERNITY_WEAR',
  BABY_APPAREL: 'BABY_APPAREL',
  BABY_TOYS: 'BABY_TOYS',
  KIDS_BOOKS_ACTIVITY_SETS: 'KIDS_BOOKS_ACTIVITY_SETS',
  POWER_TOOLS: 'POWER_TOOLS',
  HAND_TOOLS: 'HAND_TOOLS',
  CAR_ACCESSORIES: 'CAR_ACCESSORIES',
  CAR_CARE_WAXES_WASH_AIR_FRESHENERS: 'CAR_CARE_WAXES_WASH_AIR_FRESHENERS',
  TOOL_STORAGE_BOXES_BAGS_BENCHES: 'TOOL_STORAGE_BOXES_BAGS_BENCHES',
  MEASURING_TOOLS_LEVELS_TAPE: 'MEASURING_TOOLS_LEVELS_TAPE',
  LIGHTING_TOOLS_WORK_LIGHTS_HEADLAMPS: 'LIGHTING_TOOLS_WORK_LIGHTS_HEADLAMPS',
  GARAGE_STORAGE: 'GARAGE_STORAGE',
  SAFETY_SECURITY_EXTINGUISHERS_FLASHLIGHTS_ALARMS: 'SAFETY_SECURITY_EXTINGUISHERS_FLASHLIGHTS_ALARMS',
  REPLACEMENT_PARTS_BELTS_FILTERS_FUSES: 'REPLACEMENT_PARTS_BELTS_FILTERS_FUSES',
  PAINT_SUPPLIES_ROLLERS_BRUSHES_TAPE: 'PAINT_SUPPLIES_ROLLERS_BRUSHES_TAPE',
  WORKWEAR_SAFETY_GEAR_GLOVES_GOGGLES_VESTS: 'WORKWEAR_SAFETY_GEAR_GLOVES_GOGGLES_VESTS',
  OTC_MEDICINE: 'OTC_MEDICINE',
  VITAMINS_SUPPLEMENTS: 'VITAMINS_SUPPLEMENTS',
  FEMININE_CARE: 'FEMININE_CARE',
  ADULT_INCONTINENCE: 'ADULT_INCONTINENCE',
  DISPOSABLES_MASKS_GLOVES_COTTON_BALLS: 'DISPOSABLES_MASKS_GLOVES_COTTON_BALLS',
  CLEANING_SUPPLIES: 'CLEANING_SUPPLIES',
  CLEANING_TOOLS_MOPS_BRUSHES_SPONGES: 'CLEANING_TOOLS_MOPS_BRUSHES_SPONGES',
  PAPER_PRODUCTS_TISSUES_TOWELS_TP: 'PAPER_PRODUCTS_TISSUES_TOWELS_TP',
  HUMIDIFIERS_AIR_PURIFIERS: 'HUMIDIFIERS_AIR_PURIFIERS',
  MOBILITY_AIDS_CANES_WALKERS: 'MOBILITY_AIDS_CANES_WALKERS',
  PILL_ORGANIZERS: 'PILL_ORGANIZERS',
  TOILET_SAFETY_BATH_RAILS: 'TOILET_SAFETY_BATH_RAILS',
  THERMOMETERS: 'THERMOMETERS',
  BLOOD_PRESSURE_MONITORS: 'BLOOD_PRESSURE_MONITORS',
  OXIMETERS: 'OXIMETERS',
  FIRST_AID_KITS: 'FIRST_AID_KITS',
  PET_FOOD: 'PET_FOOD',
  PET_TOYS_ACCESSORIES: 'PET_TOYS_ACCESSORIES',
  PET_HEALTH_PRODUCTS: 'PET_HEALTH_PRODUCTS',
  PET_BEDS_CRATES: 'PET_BEDS_CRATES',
  GROOMING_TOOLS_BRUSHES_CLIPPERS: 'GROOMING_TOOLS_BRUSHES_CLIPPERS',
  FEEDING_BOWLS_WATER_DISPENSERS: 'FEEDING_BOWLS_WATER_DISPENSERS',
  LITTER_BOXES_WASTE_BAGS: 'LITTER_BOXES_WASTE_BAGS',
  SHELF_STABLE_FOODS: 'SHELF_STABLE_FOODS',
  BEVERAGES: 'BEVERAGES',
  SNACKS_CANDY: 'SNACKS_CANDY',
  GOURMET_ITEMS: 'GOURMET_ITEMS',
  PANTRY_PACKS: 'PANTRY_PACKS',
  BABY_FOOD_FORMULA: 'BABY_FOOD_FORMULA',
  CONDIMENTS_SPICES: 'CONDIMENTS_SPICES',
  BREAKFAST_CEREALS: 'BREAKFAST_CEREALS',
  STATIONERY_SUPPLIES: 'STATIONERY_SUPPLIES',
  DESK_ACCESSORIES: 'DESK_ACCESSORIES',
  BACKPACKS_LUNCHBOXES: 'BACKPACKS_LUNCHBOXES',
  PRINTERS_SCANNERS: 'PRINTERS_SCANNERS',
  INK_TONER: 'INK_TONER',
  CALCULATORS: 'CALCULATORS',
  OFFICE_PHONES: 'OFFICE_PHONES',
  CALENDARS_PLANNERS: 'CALENDARS_PLANNERS',
  WHITEBOARDS_CORKBOARDS: 'WHITEBOARDS_CORKBOARDS',
  LABELS_LABEL_MAKERS: 'LABELS_LABEL_MAKERS',
  BINDER_CLIPS_STAPLERS_TAPE_DISPENSERS: 'BINDER_CLIPS_STAPLERS_TAPE_DISPENSERS',
  HANDBAGS_WALLETS: 'HANDBAGS_WALLETS',
  TRAVEL_LUGGAGE: 'TRAVEL_LUGGAGE',
  DUFFEL_BAGS: 'DUFFEL_BAGS',
  BACKPACKS: 'BACKPACKS',
  FANNY_PACKS_CROSSBODY_BAGS: 'FANNY_PACKS_CROSSBODY_BAGS',
  LAPTOP_BAGS_TECH_SLEEVES: 'LAPTOP_BAGS_TECH_SLEEVES',
  TOILETRY_BAGS: 'TOILETRY_BAGS',
  TRAVEL_KITS_ORGANIZERS: 'TRAVEL_KITS_ORGANIZERS',
  NECK_PILLOWS: 'NECK_PILLOWS',
  TSA_LOCKS_LUGGAGE_TAGS: 'TSA_LOCKS_LUGGAGE_TAGS',
  REUSABLES_ECO_GOODS: 'REUSABLES_ECO_GOODS',
  CAMPING_HIKING_GEAR: 'CAMPING_HIKING_GEAR',
  FITNESS_EQUIPMENT: 'FITNESS_EQUIPMENT',
  BIKES_SCOOTERS: 'BIKES_SCOOTERS',
  HUNTING_FISHING: 'HUNTING_FISHING',
  GARDEN_TOOLS: 'GARDEN_TOOLS',
  PLANTERS_POTS: 'PLANTERS_POTS',
  OUTDOOR_LIGHTING: 'OUTDOOR_LIGHTING',
  GRILL_ACCESSORIES: 'GRILL_ACCESSORIES',
  FIRE_PITS: 'FIRE_PITS',
  LAWN_CHAIRS: 'LAWN_CHAIRS',
  POOLS_FLOATS: 'POOLS_FLOATS',
  COOLERS: 'COOLERS',
  INSECT_REPELLENT_CITRONELLA_CANDLES: 'INSECT_REPELLENT_CITRONELLA_CANDLES',
  OUTDOOR_FURNITURE_COVERS: 'OUTDOOR_FURNITURE_COVERS',
  SNOW_SHOVELS_ICE_MELT: 'SNOW_SHOVELS_ICE_MELT',
  HOLIDAY_DECOR: 'HOLIDAY_DECOR',
  GIFT_SETS: 'GIFT_SETS',
  SEASONAL_KITCHENWARE: 'SEASONAL_KITCHENWARE',
  SEASONAL_LIGHTING: 'SEASONAL_LIGHTING',
  PARTY_SUPPLIES_DECORATIONS: 'PARTY_SUPPLIES_DECORATIONS',
  COSTUMES_ACCESSORIES: 'COSTUMES_ACCESSORIES',
  WEDDING_CELEBRATION_SUPPLIES_FAVORS_GUEST_BOOKS: 'WEDDING_CELEBRATION_SUPPLIES_FAVORS_GUEST_BOOKS',
  CHILDRENS_BOOKS: 'CHILDRENS_BOOKS',
  COOKBOOKS: 'COOKBOOKS',
  PUZZLE_ACTIVITY_BOOKS: 'PUZZLE_ACTIVITY_BOOKS',
  FICTION_NON_FICTION: 'FICTION_NON_FICTION',
  ADULT_COLORING_BOOKS: 'ADULT_COLORING_BOOKS',
  RELIGIOUS_INSPIRATIONAL_BOOKS: 'RELIGIOUS_INSPIRATIONAL_BOOKS',
  ART_TOOLS_DIY_KITS: 'ART_TOOLS_DIY_KITS',
  SEWING_FABRIC_TOOLS: 'SEWING_FABRIC_TOOLS',
  CRAFT_SUPPLIES_MATERIALS: 'CRAFT_SUPPLIES_MATERIALS',
  EMBROIDERY_NOTIONS: 'EMBROIDERY_NOTIONS'
};

exports.product_identifier_type = exports.$Enums.product_identifier_type = {
  UPC: 'UPC',
  EAN: 'EAN',
  GTIN: 'GTIN',
  ISBN: 'ISBN',
  ISSN: 'ISSN',
  UNKNOWN: 'UNKNOWN'
};

exports.product_external_identifier_type = exports.$Enums.product_external_identifier_type = {
  ASIN: 'ASIN'
};

exports.product_condition_type = exports.$Enums.product_condition_type = {
  NEW_RETAIL_ECOMMERCE_READY: 'NEW_RETAIL_ECOMMERCE_READY',
  NEW_OPEN_BOX: 'NEW_OPEN_BOX',
  NEW_DAMAGED_BOX: 'NEW_DAMAGED_BOX',
  NEW_BULK_PACKAGED: 'NEW_BULK_PACKAGED',
  REFURBISHED_MANUFACTURER_CERTIFIED: 'REFURBISHED_MANUFACTURER_CERTIFIED',
  REFURBISHED_SELLER_REFURBISHED: 'REFURBISHED_SELLER_REFURBISHED',
  USED_LIKE_NEW: 'USED_LIKE_NEW',
  USED_GOOD: 'USED_GOOD',
  USED_FAIR: 'USED_FAIR',
  USED_AS_IS: 'USED_AS_IS',
  DAMAGED_FUNCTIONAL: 'DAMAGED_FUNCTIONAL',
  DAMAGED_NON_FUNCTIONAL: 'DAMAGED_NON_FUNCTIONAL',
  SALVAGE_PARTS_ONLY: 'SALVAGE_PARTS_ONLY',
  CRACKED_BROKEN: 'CRACKED_BROKEN',
  UNINSPECTED_RETURNS: 'UNINSPECTED_RETURNS',
  MIXED_CONDITION: 'MIXED_CONDITION',
  SHELF_PULLS: 'SHELF_PULLS',
  CLOSEOUTS: 'CLOSEOUTS',
  OVERSTOCK: 'OVERSTOCK',
  EXPIRED_SHORT_DATED: 'EXPIRED_SHORT_DATED'
};

exports.weight_type = exports.$Enums.weight_type = {
  MICROGRAM: 'MICROGRAM',
  MILLIGRAM: 'MILLIGRAM',
  GRAM: 'GRAM',
  KILOGRAM: 'KILOGRAM',
  METRIC_TON: 'METRIC_TON',
  IMPERIAL_TON: 'IMPERIAL_TON',
  US_TON: 'US_TON',
  OUNCE: 'OUNCE',
  POUND: 'POUND',
  STONE: 'STONE'
};

exports.length_type = exports.$Enums.length_type = {
  MICROMETER: 'MICROMETER',
  MILLIMETER: 'MILLIMETER',
  CENTIMETER: 'CENTIMETER',
  NANOMETER: 'NANOMETER',
  METER: 'METER',
  KILOMETER: 'KILOMETER',
  MILE: 'MILE',
  YARD: 'YARD',
  FOOT: 'FOOT',
  INCH: 'INCH',
  NAUTICAL_MILE: 'NAUTICAL_MILE'
};

exports.visibility_rule_type = exports.$Enums.visibility_rule_type = {
  BUYER_SEGMENT: 'BUYER_SEGMENT',
  LOCATION_COUNTRY: 'LOCATION_COUNTRY',
  LOCATION_STATE: 'LOCATION_STATE',
  LOCATION_CITY: 'LOCATION_CITY',
  LOCATION_ZIP: 'LOCATION_ZIP',
  LOCATION_REGION: 'LOCATION_REGION'
};

exports.listing_status_type = exports.$Enums.listing_status_type = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  COMPLETED: 'COMPLETED',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  REMOVED: 'REMOVED'
};

exports.lot_condition_type = exports.$Enums.lot_condition_type = {
  NEW: 'NEW',
  LIKE_NEW: 'LIKE_NEW',
  REFURBISHED: 'REFURBISHED',
  USED: 'USED',
  SCRATCH_AND_DENT: 'SCRATCH_AND_DENT',
  DAMAGED: 'DAMAGED',
  SALVAGE: 'SALVAGE',
  MIXED: 'MIXED',
  CUSTOMER_RETURNS: 'CUSTOMER_RETURNS',
  SHELF_PULLS: 'SHELF_PULLS',
  UNKNOWN: 'UNKNOWN',
  CLOSEOUTS: 'CLOSEOUTS',
  OVERSTOCK: 'OVERSTOCK'
};

exports.shipping_type = exports.$Enums.shipping_type = {
  FLAT_RATE: 'FLAT_RATE',
  CALCULATED_SHIPPING: 'CALCULATED_SHIPPING',
  BUYER_ARRANGED: 'BUYER_ARRANGED',
  FREE_SHIPPING: 'FREE_SHIPPING',
  LOCAL_PICKUP_ONLY: 'LOCAL_PICKUP_ONLY',
  BINDING_SHIPPING: 'BINDING_SHIPPING',
  BUYER_PICKUP_ALLOWED: 'BUYER_PICKUP_ALLOWED'
};

exports.freight_type = exports.$Enums.freight_type = {
  SINGLE_BOX: 'SINGLE_BOX',
  MULTIPLE_BOXES: 'MULTIPLE_BOXES',
  LTL: 'LTL',
  FTL: 'FTL'
};

exports.lot_packaging_type = exports.$Enums.lot_packaging_type = {
  PALLETS: 'PALLETS',
  FLOOR_LOADED: 'FLOOR_LOADED'
};

exports.bid_increment_type = exports.$Enums.bid_increment_type = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED'
};

exports.auction_status_type = exports.$Enums.auction_status_type = {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  ENDED: 'ENDED'
};

exports.listing_type_preference = exports.$Enums.listing_type_preference = {
  AUCTION: 'AUCTION',
  CATALOG: 'CATALOG',
  BOTH: 'BOTH'
};

exports.buyer_segment_type = exports.$Enums.buyer_segment_type = {
  DISCOUNT_RETAIL: 'DISCOUNT_RETAIL',
  STOCKX: 'STOCKX',
  AMAZON_OR_WALMART: 'AMAZON_OR_WALMART',
  LIVE_SELLER_MARKETPLACES: 'LIVE_SELLER_MARKETPLACES',
  RESELLER_MARKETPLACES: 'RESELLER_MARKETPLACES',
  OFF_PRICE_RETAIL: 'OFF_PRICE_RETAIL',
  EXPORTER: 'EXPORTER',
  REFURBISHER_REPAIR_SHOP: 'REFURBISHER_REPAIR_SHOP'
};

exports.geographic_preference_region_type = exports.$Enums.geographic_preference_region_type = {
  NORTHEAST_US: 'NORTHEAST_US',
  MIDWEST_US: 'MIDWEST_US',
  SOUTH_US: 'SOUTH_US',
  WEST_US: 'WEST_US'
};

exports.buyer_verification_status_type = exports.$Enums.buyer_verification_status_type = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.packaging_type = exports.$Enums.packaging_type = {
  ORIGINAL_PACKAGING_SEALED: 'ORIGINAL_PACKAGING_SEALED',
  ORIGINAL_PACKAGING_OPENED: 'ORIGINAL_PACKAGING_OPENED',
  NO_RETAIL_PACKAGING: 'NO_RETAIL_PACKAGING',
  DAMAGED_PACKAGING: 'DAMAGED_PACKAGING',
  REPACKAGED_BROWN_BOX: 'REPACKAGED_BROWN_BOX'
};

exports.catalog_offer_item_change_type = exports.$Enums.catalog_offer_item_change_type = {
  ITEM_ADDED: 'ITEM_ADDED',
  ITEM_REMOVED: 'ITEM_REMOVED',
  QUANTITY_CHANGED: 'QUANTITY_CHANGED',
  ITEM_REPLACED: 'ITEM_REPLACED',
  PRICE_CHANGED: 'PRICE_CHANGED',
  TERMS_UPDATED: 'TERMS_UPDATED',
  AUTO_ACCEPTED: 'AUTO_ACCEPTED'
};

exports.offer_negotiation_status_type = exports.$Enums.offer_negotiation_status_type = {
  BUYER_OFFERED: 'BUYER_OFFERED',
  SELLER_COUNTERED: 'SELLER_COUNTERED',
  BUYER_COUNTERED: 'BUYER_COUNTERED',
  AGREED: 'AGREED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  BUYER_REJECT: 'BUYER_REJECT',
  SELLER_REJECT: 'SELLER_REJECT',
  PENDING_BUYER_RESPONSE: 'PENDING_BUYER_RESPONSE',
  PENDING_SELLER_RESPONSE: 'PENDING_SELLER_RESPONSE'
};

exports.catalog_offer_item_status_type = exports.$Enums.catalog_offer_item_status_type = {
  ACTIVE: 'ACTIVE',
  REMOVED: 'REMOVED',
  REPLACED: 'REPLACED'
};

exports.offer_negotiation_action_type = exports.$Enums.offer_negotiation_action_type = {
  BUYER_OFFER: 'BUYER_OFFER',
  SELLER_COUNTER: 'SELLER_COUNTER',
  BUYER_COUNTER: 'BUYER_COUNTER',
  SELLER_ACCEPT: 'SELLER_ACCEPT',
  BUYER_ACCEPT: 'BUYER_ACCEPT',
  SELLER_REJECT: 'SELLER_REJECT',
  BUYER_REJECT: 'BUYER_REJECT',
  SELLER_OFFER: 'SELLER_OFFER',
  SYSTEM_AUTO_ACCEPT: 'SYSTEM_AUTO_ACCEPT'
};

exports.offer_negotiation_offer_status_type = exports.$Enums.offer_negotiation_offer_status_type = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  COUNTERED: 'COUNTERED',
  EXPIRED: 'EXPIRED',
  SUPERSEDED: 'SUPERSEDED'
};

exports.offer_status_type = exports.$Enums.offer_status_type = {
  ACTIVE: 'ACTIVE',
  NEGOTIATING: 'NEGOTIATING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.offer_rejection_category_type = exports.$Enums.offer_rejection_category_type = {
  PRICING_TOO_LOW: 'PRICING_TOO_LOW',
  PRICING_TOO_HIGH: 'PRICING_TOO_HIGH',
  BUDGET_CONSTRAINTS: 'BUDGET_CONSTRAINTS',
  INVENTORY_UNAVAILABLE: 'INVENTORY_UNAVAILABLE',
  DELIVERY_TIMELINE_TOO_LONG: 'DELIVERY_TIMELINE_TOO_LONG',
  FOUND_BETTER_ALTERNATIVE: 'FOUND_BETTER_ALTERNATIVE',
  PROJECT_CANCELLED: 'PROJECT_CANCELLED',
  OTHER: 'OTHER'
};

exports.catalog_product_status_type = exports.$Enums.catalog_product_status_type = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  OUT_OF_STOCK: 'OUT_OF_STOCK'
};

exports.order_status_type = exports.$Enums.order_status_type = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PAID: 'PAID',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED'
};

exports.order_type = exports.$Enums.order_type = {
  AUCTION: 'AUCTION',
  CATALOG: 'CATALOG',
  LOT: 'LOT'
};

exports.payment_method_type = exports.$Enums.payment_method_type = {
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  CHECK: 'CHECK'
};

exports.payment_status_type = exports.$Enums.payment_status_type = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  DISPUTED: 'DISPUTED'
};

exports.us_state_type = exports.$Enums.us_state_type = {
  AL: 'AL',
  AK: 'AK',
  AZ: 'AZ',
  AR: 'AR',
  CA: 'CA',
  CO: 'CO',
  CT: 'CT',
  DE: 'DE',
  FL: 'FL',
  GA: 'GA',
  HI: 'HI',
  ID: 'ID',
  IL: 'IL',
  IN: 'IN',
  IA: 'IA',
  KS: 'KS',
  KY: 'KY',
  LA: 'LA',
  ME: 'ME',
  MD: 'MD',
  MA: 'MA',
  MI: 'MI',
  MN: 'MN',
  MS: 'MS',
  MO: 'MO',
  MT: 'MT',
  NE: 'NE',
  NV: 'NV',
  NH: 'NH',
  NJ: 'NJ',
  NM: 'NM',
  NY: 'NY',
  NC: 'NC',
  ND: 'ND',
  OH: 'OH',
  OK: 'OK',
  OR: 'OR',
  PA: 'PA',
  RI: 'RI',
  SC: 'SC',
  SD: 'SD',
  TN: 'TN',
  TX: 'TX',
  UT: 'UT',
  VT: 'VT',
  VA: 'VA',
  WA: 'WA',
  WV: 'WV',
  WI: 'WI',
  WY: 'WY'
};

exports.certificate_status_type = exports.$Enums.certificate_status_type = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED',
  PENDING: 'PENDING'
};

exports.country_code_type = exports.$Enums.country_code_type = {
  US: 'US',
  CA: 'CA',
  MX: 'MX',
  GB: 'GB',
  FR: 'FR',
  DE: 'DE',
  IT: 'IT',
  ES: 'ES',
  NL: 'NL',
  BE: 'BE',
  CH: 'CH',
  AT: 'AT',
  SE: 'SE',
  NO: 'NO',
  DK: 'DK',
  FI: 'FI',
  IE: 'IE',
  PT: 'PT',
  GR: 'GR',
  PL: 'PL',
  CZ: 'CZ',
  HU: 'HU',
  SK: 'SK',
  SI: 'SI',
  EE: 'EE',
  LV: 'LV',
  LT: 'LT',
  BG: 'BG',
  RO: 'RO',
  HR: 'HR',
  MT: 'MT',
  CY: 'CY',
  LU: 'LU',
  IS: 'IS',
  LI: 'LI',
  MC: 'MC',
  SM: 'SM',
  VA: 'VA',
  AD: 'AD',
  JP: 'JP',
  CN: 'CN',
  KR: 'KR',
  IN: 'IN',
  AU: 'AU',
  NZ: 'NZ',
  SG: 'SG',
  HK: 'HK',
  TW: 'TW',
  MY: 'MY',
  TH: 'TH',
  PH: 'PH',
  ID: 'ID',
  VN: 'VN',
  BR: 'BR',
  AR: 'AR',
  CL: 'CL',
  CO: 'CO',
  PE: 'PE',
  UY: 'UY',
  PY: 'PY',
  BO: 'BO',
  EC: 'EC',
  VE: 'VE',
  GY: 'GY',
  SR: 'SR',
  FK: 'FK',
  GF: 'GF',
  ZA: 'ZA',
  EG: 'EG',
  NG: 'NG',
  KE: 'KE',
  GH: 'GH',
  MA: 'MA',
  TN: 'TN',
  DZ: 'DZ',
  LY: 'LY',
  SD: 'SD',
  ET: 'ET',
  UG: 'UG',
  TZ: 'TZ',
  MZ: 'MZ',
  MG: 'MG',
  ZM: 'ZM',
  ZW: 'ZW',
  BW: 'BW',
  NA: 'NA',
  SZ: 'SZ',
  LS: 'LS',
  MW: 'MW',
  AO: 'AO',
  CD: 'CD',
  CG: 'CG',
  CF: 'CF',
  CM: 'CM',
  TD: 'TD',
  NE: 'NE',
  ML: 'ML',
  BF: 'BF',
  CI: 'CI',
  GN: 'GN',
  SN: 'SN',
  GM: 'GM',
  GW: 'GW',
  SL: 'SL',
  LR: 'LR',
  MR: 'MR',
  CV: 'CV',
  ST: 'ST',
  GQ: 'GQ',
  GA: 'GA',
  DJ: 'DJ',
  SO: 'SO',
  ER: 'ER',
  KM: 'KM',
  SC: 'SC',
  MU: 'MU',
  RE: 'RE',
  YT: 'YT',
  MV: 'MV',
  RU: 'RU',
  TR: 'TR',
  IL: 'IL',
  JO: 'JO',
  LB: 'LB',
  SY: 'SY',
  IQ: 'IQ',
  IR: 'IR',
  AF: 'AF',
  PK: 'PK',
  BD: 'BD',
  LK: 'LK',
  NP: 'NP',
  BT: 'BT',
  MM: 'MM',
  LA: 'LA',
  KH: 'KH',
  BN: 'BN',
  MN: 'MN',
  KZ: 'KZ',
  KG: 'KG',
  TJ: 'TJ',
  TM: 'TM',
  UZ: 'UZ',
  GE: 'GE',
  AM: 'AM',
  AZ: 'AZ',
  BY: 'BY',
  MD: 'MD',
  UA: 'UA',
  FJ: 'FJ',
  PG: 'PG',
  SB: 'SB',
  VU: 'VU',
  NC: 'NC',
  PF: 'PF',
  WF: 'WF',
  AS: 'AS',
  GU: 'GU',
  MP: 'MP',
  PW: 'PW',
  FM: 'FM',
  MH: 'MH',
  KI: 'KI',
  NR: 'NR',
  TV: 'TV',
  TO: 'TO',
  WS: 'WS',
  CK: 'CK',
  NU: 'NU',
  TK: 'TK'
};

exports.certificate_business_entity_type = exports.$Enums.certificate_business_entity_type = {
  CORPORATION: 'CORPORATION',
  LLC: 'LLC',
  PARTNERSHIP: 'PARTNERSHIP',
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP',
  OTHER: 'OTHER'
};

exports.certificate_verification_status_type = exports.$Enums.certificate_verification_status_type = {
  VERIFIED: 'VERIFIED',
  PENDING: 'PENDING',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.certificate_verification_method_type = exports.$Enums.certificate_verification_method_type = {
  MANUAL: 'MANUAL',
  AUTOMATED: 'AUTOMATED',
  THIRD_PARTY: 'THIRD_PARTY',
  SELF_REPORTED: 'SELF_REPORTED'
};

exports.address_type = exports.$Enums.address_type = {
  DEFAULT: 'DEFAULT',
  SHIPPING: 'SHIPPING',
  BILLING: 'BILLING'
};

exports.user_type = exports.$Enums.user_type = {
  BUYER: 'BUYER',
  SELLER: 'SELLER',
  BUYER_AND_SELLER: 'BUYER_AND_SELLER'
};

exports.variation_option_type = exports.$Enums.variation_option_type = {
  SIZE: 'SIZE',
  COLOR: 'COLOR',
  MATERIAL: 'MATERIAL',
  STYLE: 'STYLE',
  CAPACITY: 'CAPACITY',
  FLAVOR: 'FLAVOR'
};

exports.catalog_offer_auto_action_type = exports.$Enums.catalog_offer_auto_action_type = {
  SELLER_ADD_PRODUCT_AUTO_ACCEPT: 'SELLER_ADD_PRODUCT_AUTO_ACCEPT',
  SELLER_UPDATE_ITEM_AUTO_ACCEPT: 'SELLER_UPDATE_ITEM_AUTO_ACCEPT',
  SELLER_BULK_MODIFY_AUTO_ACCEPT: 'SELLER_BULK_MODIFY_AUTO_ACCEPT',
  SELLER_PRICE_ADJUSTMENT_AUTO_ACCEPT: 'SELLER_PRICE_ADJUSTMENT_AUTO_ACCEPT',
  SELLER_QUANTITY_UPDATE_AUTO_ACCEPT: 'SELLER_QUANTITY_UPDATE_AUTO_ACCEPT',
  SYSTEM_AUTO_ORDER_CREATION: 'SYSTEM_AUTO_ORDER_CREATION'
};

exports.lot_listing_type = exports.$Enums.lot_listing_type = {
  MANIFESTED: 'MANIFESTED',
  UNMANIFESTED: 'UNMANIFESTED',
  PARTIALLY_MANIFESTED: 'PARTIALLY_MANIFESTED'
};

exports.listing_source_type = exports.$Enums.listing_source_type = {
  RETAILER_STORE_RETURNS: 'RETAILER_STORE_RETURNS',
  RETAILER_ECOMMERCE_RETURNS: 'RETAILER_ECOMMERCE_RETURNS',
  RETAILER_SHELF_PULLS: 'RETAILER_SHELF_PULLS',
  RETAILER_OVERSTOCKS_CLOSEOUTS: 'RETAILER_OVERSTOCKS_CLOSEOUTS',
  THREE_PL_CONSOLIDATED_RETURNS: 'THREE_PL_CONSOLIDATED_RETURNS',
  THREE_PL_UNCLAIMED_ABANDONED_FREIGHT: 'THREE_PL_UNCLAIMED_ABANDONED_FREIGHT',
  DISTRIBUTOR_OVERSTOCKS_CLOSEOUTS: 'DISTRIBUTOR_OVERSTOCKS_CLOSEOUTS',
  BRAND_MANUFACTURER_RETURNS_REFURB_EXCESS: 'BRAND_MANUFACTURER_RETURNS_REFURB_EXCESS',
  MARKETPLACE_FBA_3P_RETURNS: 'MARKETPLACE_FBA_3P_RETURNS'
};

exports.listing_source_name = exports.$Enums.listing_source_name = {
  AMAZON: 'AMAZON',
  WALMART: 'WALMART',
  TARGET: 'TARGET',
  COSTCO: 'COSTCO',
  SAMS_CLUB: 'SAMS_CLUB',
  BJS_WHOLESALE: 'BJS_WHOLESALE',
  BEST_BUY: 'BEST_BUY',
  HOME_DEPOT: 'HOME_DEPOT',
  LOWES: 'LOWES',
  WAYFAIR: 'WAYFAIR',
  KOHLS: 'KOHLS',
  MACYS: 'MACYS',
  NORDSTROM: 'NORDSTROM',
  NORDSTROM_RACK: 'NORDSTROM_RACK',
  DICKS_SPORTING_GOODS: 'DICKS_SPORTING_GOODS',
  TRACTOR_SUPPLY: 'TRACTOR_SUPPLY',
  DOLLAR_GENERAL: 'DOLLAR_GENERAL',
  FAMILY_DOLLAR: 'FAMILY_DOLLAR',
  FIVE_BELOW: 'FIVE_BELOW',
  CVS: 'CVS',
  WALGREENS: 'WALGREENS',
  ULTA: 'ULTA',
  SEPHORA: 'SEPHORA',
  BED_BATH_BEYOND: 'BED_BATH_BEYOND',
  OVERSTOCK: 'OVERSTOCK',
  OFFICE_DEPOT: 'OFFICE_DEPOT',
  OFFICEMAX: 'OFFICEMAX',
  STAPLES: 'STAPLES',
  ACE_HARDWARE: 'ACE_HARDWARE',
  ACADEMY_SPORTS: 'ACADEMY_SPORTS',
  ASHLEY_FURNITURE: 'ASHLEY_FURNITURE',
  OTHER: 'OTHER'
};

exports.load_type = exports.$Enums.load_type = {
  CASE_PACK: 'CASE_PACK',
  PALLET: 'PALLET',
  GAYLORD: 'GAYLORD',
  MIXED_LOT: 'MIXED_LOT',
  LESS_THAN_TRUCKLOAD: 'LESS_THAN_TRUCKLOAD',
  FULL_TRUCKLOAD: 'FULL_TRUCKLOAD',
  MULTIPLE_TRUCKLOADS: 'MULTIPLE_TRUCKLOADS'
};

exports.listing_inspection_status = exports.$Enums.listing_inspection_status = {
  UNINSPECTED: 'UNINSPECTED',
  AS_IS: 'AS_IS',
  VISUAL_CHECK_ONLY: 'VISUAL_CHECK_ONLY',
  TESTED: 'TESTED',
  CERTIFIED: 'CERTIFIED'
};

exports.Prisma.ModelName = {
  addresses: 'addresses',
  auction_bid_history: 'auction_bid_history',
  auction_bids: 'auction_bids',
  auction_listing_images: 'auction_listing_images',
  auction_listing_product_manifests: 'auction_listing_product_manifests',
  auction_listing_visibility_rules: 'auction_listing_visibility_rules',
  auction_listings: 'auction_listings',
  brands: 'brands',
  buyer_profile_preferences: 'buyer_profile_preferences',
  buyer_profiles: 'buyer_profiles',
  catalog_listing_images: 'catalog_listing_images',
  catalog_listing_visibility_rules: 'catalog_listing_visibility_rules',
  catalog_listings: 'catalog_listings',
  catalog_offer_item_changes: 'catalog_offer_item_changes',
  catalog_offer_items: 'catalog_offer_items',
  catalog_offer_negotiations: 'catalog_offer_negotiations',
  catalog_offers: 'catalog_offers',
  catalog_product_images: 'catalog_product_images',
  catalog_product_variant_attributes: 'catalog_product_variant_attributes',
  catalog_product_variant_images: 'catalog_product_variant_images',
  catalog_product_variants: 'catalog_product_variants',
  catalog_products: 'catalog_products',
  images: 'images',
  order_items: 'order_items',
  order_status_history: 'order_status_history',
  orders: 'orders',
  payments: 'payments',
  resale_certificates: 'resale_certificates',
  seller_order_counters: 'seller_order_counters',
  seller_profile_preferences: 'seller_profile_preferences',
  seller_profiles: 'seller_profiles',
  user_addresses: 'user_addresses',
  user_preferences: 'user_preferences',
  users: 'users',
  variant_attribute_values: 'variant_attribute_values',
  variant_attributes: 'variant_attributes',
  catalog_offer_alternative_suggestions: 'catalog_offer_alternative_suggestions',
  catalog_offer_audit_log: 'catalog_offer_audit_log',
  catalog_offer_minimum_terms: 'catalog_offer_minimum_terms',
  buyer_brand_preferences: 'buyer_brand_preferences',
  lot_listing_images: 'lot_listing_images',
  lot_listing_product_manifests: 'lot_listing_product_manifests',
  lot_listing_tags: 'lot_listing_tags',
  lot_listing_visibility_rules: 'lot_listing_visibility_rules',
  lot_listings: 'lot_listings',
  lot_offer_audit_log: 'lot_offer_audit_log',
  lot_offer_negotiations: 'lot_offer_negotiations',
  lot_offers: 'lot_offers',
  tags: 'tags'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
