import { getAmplifyDataClientConfig } from "@aws-amplify/backend/function/runtime";

import { env } from "$amplify/env/websocket-connect";
import { Amplify } from "aws-amplify";
import { generateClient } from "aws-amplify/data";

import { Schema } from "../../data/resource";

const { resourceConfig, libraryOptions } =
  await getAmplifyDataClientConfig(env);
Amplify.configure(resourceConfig, libraryOptions);
const client = generateClient<Schema>();

export const handler = async (event: any) => {
  const connectionId = event.requestContext.connectionId; // The connectionId is automatically generated by AWS API Gateway WebSocket when a client establishes a WebSocket connection
  const userId = event.queryStringParameters?.userId;

  console.log(
    `WebSocket connect attempt - ConnectionId: ${connectionId}, UserId: ${userId}`
  );

  if (!userId) {
    console.error("Missing userId parameter");
    return {
      statusCode: 400,
      body: "Missing userId parameter",
    };
  }

  try {
    const ttl = Math.floor(Date.now() / 1000) + 24 * 60 * 60; // 24 hours TTL
    const now = new Date().toISOString();

    // Use Amplify client to create WebSocket connection record
    const { data, errors } = await client.models.WebSocketConnection.create({
      id: connectionId, // Store connectionId as the id field
      userId: userId,
      timestamp: now,
      ttl: ttl,
    });

    if (errors) {
      console.error("Error creating WebSocket connection:", errors);
      return {
        statusCode: 500,
        body: "Failed to store connection",
      };
    }

    console.log(
      `WebSocket connection stored: ${connectionId} for user: ${userId}`
    );

    return {
      statusCode: 200,
      body: "Connected",
    };
  } catch (error) {
    console.error("Error storing WebSocket connection:", error);
    return {
      statusCode: 500,
      body: "Failed to store connection",
    };
  }
};
